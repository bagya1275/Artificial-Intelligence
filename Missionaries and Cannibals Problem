from collections import deque

def is_valid(m, c):
    return (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)

def solve_mc():
    visited = set()
    queue = deque([((3, 3, 1), [])])
    while queue:
        (m, c, b), path = queue.popleft()
        if (m, c, b) in visited:
            continue
        visited.add((m, c, b))
        if m == 0 and c == 0 and b == 0:
            print("Solution:", path)
            return
        moves = [(1, 0), (0, 1), (2, 0), (0, 2), (1, 1)]
        for dm, dc in moves:
            if b == 1:
                nm, nc, nb = m - dm, c - dc, 0
            else:
                nm, nc, nb = m + dm, c + dc, 1
            if 0 <= nm <= 3 and 0 <= nc <= 3 and is_valid(nm, nc):
                queue.append(((nm, nc, nb), path + [(nm, nc, nb)]))

solve_mc()
